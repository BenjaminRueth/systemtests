"""Script for system testing preCICE with docker and comparing output.

This script builds a docker image for an system test of preCICE.
It starts a container of the builded image and copys the output generated by the
simulation within the test to the host.
The output is compared to a reference.
It passes if files are equal, else it raises an exception.

Example:
    System test of-of and use local preCICE image

        $ python system_testing.py -s of-of -l
"""

import argparse, filecmp, os, sys
import common, docker
from common import ccall

def build(systest, branch, local):
    """Building docker image.

    This function builds a docker image with the respectively system test,
    runs a container in background to copy the output generated by the
    simulation to the host:

    Args:
        systest (str): Name of the system test.
    """
    if local:
        docker.build_image(tag = systest, build_args = {"from" :
                                                        docker.get_namespace() + "precice-" + branch + ":latest"})
    else:
        docker.build_image(tag = systest)

    test = docker.get_namespace() + systest
    ccall("docker run -it -d --name " + test + " " + test)
    ccall("docker cp " + test + ":Output . ")


class IncorrectOutput(Exception):
    def __init__(self, diff_files, left_only, right_only):
        self.diff_files = diff_files
        self.left_only = left_only
        self.right_only = right_only

    def __str__(self):
        s  = "Output files do not match reference\n"
        s += "Files differing               : " + str(self.diff_files) + "\n"
        s += "Files only in reference (left): " + str(self.left_only) + "\n"
        s += "Files only in output(right)   : " + str(self.right_only)
        return s



def comparison(pathToRef, pathToOutput):
    """Compares two directories

    Args:
        pathToRef (str): Path to the reference files.
        pathToOutput (str): Path to the output files.

    Raises:
        Exception: Raises IncorrectOutput when output differs from reference.
    """
    ret = common.get_diff_files(filecmp.dircmp(pathToRef, pathToOutput))
    if ret[0] or ret[1] or ret[2]:
        raise IncorrectOutput(*ret)



def build_run_compare(test, branch, local_precice):
    """ Runs and compares test, using precice branch. """
    dirname = "/Test_" + test
    with common.chdir(os.getcwd() + dirname):
        # Build
        build(test, branch, local_precice)
        # Preparing string for path
        pathToRef = os.path.join(os.getcwd(), "referenceOutput")
        pathToOutput = os.path.join(os.getcwd(), "Output")
        # Comparing
        comparison(pathToRef, pathToOutput)


if __name__ == "__main__":
    # Parsing flags
    parser = argparse.ArgumentParser(description='Build local.')
    parser.add_argument('-l', '--local', action='store_true', help="use local preCICE image (default: use remote image)")
    parser.add_argument('-s', '--systemtest', help="choose system tests you want to use", choices = common.get_tests())
    parser.add_argument('-b', '--branch', help="preCICE branch to use", default = "develop")
    args = parser.parse_args()
    build_run_compare(args.systemtest, args.branch, args.local)
